[
  {
    "objectID": "posts/2020-07-24-automated-product-recognition-for-hospitality-industry-insights.html",
    "href": "posts/2020-07-24-automated-product-recognition-for-hospitality-industry-insights.html",
    "title": "Automated product recognition for hospitality industry insights 🍺",
    "section": "",
    "text": "We’re all a bit too familiar with membership cards of supermarket chains, like Walmart or Albert Heijn, the largest supermarket chain in the Netherlands. Besides the advantages these cards have for the consumer, they have a lot more advantages for the supermarket chains. They apply advanced data science techniques to the data gathered with these cards to figure out where to put products in the store, what products to put next to each other and what products to put on sale together.\nFor 6 months I interned at TAPP, a company that tries to bring the same insights to the hospitality industry. Because there are no membership cards for bars (in most cases), we do this by analyzing the products on receipts. Because of the inconsistent offerings at venues, TAPP focuses almost exclusively on drinks, due to the clearly branded single units used. Doing this gives us a very detailed view of the market for drinks, allowing us to see, for example, market shares and revenues for specific sodas, liquors and beers.\nEvery consumption we receive is connected to a product. Before we can use products in our analysis, a product needs to be ‘tagged’. This tagging means we need to specify what a product is, because the description on a receipt is not enough for insights. A description might be ‘Hot choco’, and to use this for our analysis we need to specialize our five tag levels, which are group, category, subcategory, type and brand. This is also the hierarchical order, so a category has zero or more subcategories which has in turn zero or more types. I purposely omit group because the group tag consists of the values ‘Drinks’, ‘Food’ and ‘Other’, and we only have categories for ‘Drinks’, because of our focus. The hierarchy is visualized in the image below."
  },
  {
    "objectID": "posts/2020-07-24-automated-product-recognition-for-hospitality-industry-insights.html#sounds-great-so-whats-the-problem",
    "href": "posts/2020-07-24-automated-product-recognition-for-hospitality-industry-insights.html#sounds-great-so-whats-the-problem",
    "title": "Automated product recognition for hospitality industry insights 🍺",
    "section": "Sounds great, so whats the problem?",
    "text": "Sounds great, so whats the problem?\nWell, a product is identified by the unique combination of the venue, the description and the price. This means a coke in small, medium and large are three different products at a single venue. And this goes for every venue. This means that when connecting with a new venue, we get somewhere between 300 and 2000 new products. These all need to be tagged, which was up until now all done manually. You can image this is a very slow, error-prone process.\nAnd this is where the fun begins. Because this is a very well suited case for some good ol’ machine learning. The goal is to substitute the human labour in the tagging process by a machine learning model. In the image below you can see the data we are working with. Variables that are useful for classification are the description and the unit price. We start of without any of the tags and want to end with them filled in. Because sometimes we just don’t have enough information for some tag, the model also has to be able to predict empty values. This is also visible in the images below, where the brand is left empty because the description ‘koffie’ (coffee) does not give us enough information to fill this.\n\n\n\n\n\nSource data for a product\n\n\n\n\n\n\n\nTarget data for a product\n\n\nBecause the hierarchical structure of our tags holds a lot information, the best approach seemed to classify each tag separately, starting at the top with group and working our way down to brand. This way, lower level tags can use the higher level tag information for their predictions.\nThere is now way around getting a bit technical, so if that is not your thing you can skip to the results."
  },
  {
    "objectID": "posts/2020-07-24-automated-product-recognition-for-hospitality-industry-insights.html#approach",
    "href": "posts/2020-07-24-automated-product-recognition-for-hospitality-industry-insights.html#approach",
    "title": "Automated product recognition for hospitality industry insights 🍺",
    "section": "Approach",
    "text": "Approach\nThere are two parts to solve this problem. First, we need a model that is capable of reliably predicting these tags. Second, we need to implement this model in our current AWS based infrastructure.\n\nGeneral\nDue to our data diversity, this is quite a complex problem. There is natural language processing (NLP) involved in handling the descriptions, as well as our tags. The tags can be regarded as either text or categorical variables (but we’ll see soon this doesn’t matter). The price is fairly simple, and we’ll just take the normalized price as input. Because we have different types of input, I opted to use a model with multiple inputs. I was most comfortable with Keras, and their functional API supports multiple inputs, so I chose this for implementation. Also, because we are tagging each layer separately, there will be a ‘different’ model for each layers. I’m putting different in quotation marks because the model architecture will be the same, but the weights will be different.\nWhen there is NLP involved, two things are generally going to happen.\n\nTokenize the words (‘Cola’ -> [23])\nUse word embeddings ([23] -> [0.3, -0.8, 0.7, 0.4, 0.1])\n\nThe tokenization required some creativity, because the descriptions need to be split on a space, whereas the tags should not (e.g. ‘Mineral Water’ is one tag). So two tokenizers are used. The problem is that both tokenizers use (partially) the same range of number, meaning that ‘drinks’ and ‘Choco’ can have the same token (unique number). This will be talked about more below.\n\n\nWord embeddings\nThere are many different approaches to the word embeddings. There are very recent and advanced representations like BERT and ELMo and a little bit older representations like GloVe and Word2Vec. We can use these pretrained weights, but because our vocabulary has a very slim overlap with normal English, this probably does not improve our result much if any. So I decided to train the embedding layer myself, and with almost 150k descriptions, we can get pretty good representations. In Keras, word embeddings are implemented by creating a fixed size random vector, which is then optimized by training. This vector captures no information about context or position, meaning a lot of information is lost. But because we are doing classification, which doesn’t require these things, this is not a big problem.\nOne thing to consider about these vectors is that some recent implementations of categorical variables are doing the exact same thing, most notably the authors of Fast.ai. A value is converted to a fixed size vector, to give the value a richer representation, which is then optimized by training. Now, Keras doesn’t have this categorical variable specific approach, but we can just use the same embeddings al the sentences. Because in this case, the representations are the same. To visualize the difference, look at the image below. Here, you can clearly see that the word2vec embeddings capture semantic similarities between sentence b and c, whereas the embeddings trained from scratch to not.\n\n\n\n\n\nDifferences between word2vec and trained from scratch word embeddings. Source: López-Sánchez et al. 2018\n\n\n\n\nRNN or CNN?\nI opted to try two approaches. Because there is NLP involved, using a recurrent neural network (RNN) with LSTM layers seems like a good idea. All the current state of the art language processing is done using recurrent network with LSTM layers. LSTM layers have, simply said, a memory which they can use to remember was words it has seen previously. This gives them the capacity to find word relations that are close together but also further away and makes them very powerful for language processing.\nThe duplicate token problem I raised earlier really hurts the LSTM performance, because it is very confusing. I solved this by creating a separate input for the tags. So the double tokens still exist, but they are never seen together. I also created a separate input for the price, where no embedding was needed. The result is a network with three inputs, one for the description, one for the parent tags and one for the price. The description and tags both go into a embedding layer and an LSTM layer. The result is the following network.\n\nBecause our texts are very short, I also wanted to try a convolutional neural network (CNN). Whereas LSTMs are very good for finding relations between words further apart, convolutional layers are very good at finding word structures closer together. Combined with pooling layers we can even detect certain structures in sentences. The same goes for the ‘categorical’ values of the tags. CNNs are already very well known from computer vision, where they have been the state-of-the-art for multiple years.\nThe duplicate token problem is much less of a problem with the convolutional approach, because the context of a word matters more than the word itself. The odds of finding the same structures with the same tokens in both the tags and the descriptions is marginal with a vocabulary of 16000 words for the descriptions and the 1300 tag combinations. So, if this is not a problem, the tags and descriptions can just be concatenated when doing convolutions. This approach also has the capacity to see certain relations between tags and description. The result is a model with only two inputs."
  },
  {
    "objectID": "posts/2020-07-24-automated-product-recognition-for-hospitality-industry-insights.html#implementation",
    "href": "posts/2020-07-24-automated-product-recognition-for-hospitality-industry-insights.html#implementation",
    "title": "Automated product recognition for hospitality industry insights 🍺",
    "section": "Implementation",
    "text": "Implementation\nAt TAPP we use two services primarily for our data pipeline: AWS and Airflow. Airflow is a great, open source and free tool to manage data pipelines and the ETL process. If you want to know more about Airflow, I recommend this article.\nEvery part of our infrastructure lives inside a docker container. Using ECS, we can easily manage our services and it allows us to quickly scale up and down, depending on our needs. Additionally, moving our infrastructure to different environments is relatively easy, for example a local development environment.\nPredicting or training this model are in our system batch operations, which need a lot of compute power for a short time. For this reason, I opted to implement them using AWS Batch. AWS Batch only supports jobs as docker containers, which is nice because we are already working with those. These jobs are ran by an Airflow DAG which schedules the job using the BatchOperator. This model was the first neural network that was implemented which had one big problem: there was no existing infrastructure for using GPUs. Using a GPU on AWS batch requires a couple of things.\n\nAn EC2 instance with a GPU. I opted to use a p2.xlarge instance, which is on of the cheapest GPU instances and features an Nvidia Telsa K80.\nThis process requires a GPU enabled Amazon Machine Image (AMI), which are the virtual machines Amazon uses for their instances. Now, there are a couple of GPU enabled AMIs around, most notably the Deep Learning AMIs of Amazon itself, which feature a whole range of preinstalled deep learning libraries. Because we are using docker to run our batches, we do not care about the preinstalled deep learning libraries, but rather much more about the installed CUDA and Nvidia Drivers, that allow us to do GPU operations.\nTo run GPU operations in docker, one needs to set the docker runtime to ‘nvidia’. To do this by default, we need to edit the AMI and save it as a custom AMI. We can then use this custom AMI for our AWS compute environment.\nCreate an AWS Job Queue.\nCreate an AWS Compute Environment with the custom AMI, which handles jobs from the job queue.\n\nAfter this is all done, we find ourselves a nice docker image which has the required CUDA libraries and Nvidia drivers installed, along with our desired python version (3.6.x). This actually took some time, because the official TensorFlow images are all python 3.5 (or 2.7, but our codebase is in python 3). The images I settled on was Deepo, by the user Ufoym. Using this in its python 3.6 variant with GPU support worked wonderfully, and required a us to only set environment variables and install some additional python packages during building. Requiring little additional software kept the build time and CI/CD pipeline speed to a reasonable level as well.\nIn this scenario, training the network really needed a GPU. However, the predictions can be done on just a CPU. This is great, because for that we don’t need the custom AMI and separate EC2 instance. We still do the predictions using Batch, but run them on the same machines we already had available.\nModel persistence between training and predictions is done using S3. After training, the weights and tokenizers are uploaded to S3, which are then downloaded before doing predictions."
  },
  {
    "objectID": "posts/2020-07-24-automated-product-recognition-for-hospitality-industry-insights.html#results",
    "href": "posts/2020-07-24-automated-product-recognition-for-hospitality-industry-insights.html#results",
    "title": "Automated product recognition for hospitality industry insights 🍺",
    "section": "Results",
    "text": "Results\nBoth approaches to the problem worked fairly well, but it turned out the convolutional approach outperformed the recurrent approach by multiple percents in some tasks. In the table below the results are compared and it is clear that the convolutional approach outperforms the recurrent approach by significant margins in the group, type and brand tasks. The increase in brand recognition is especially impressive, with over 4% higher accuracy and an error reduction of 48.5%. With higher accuracy in every task and lower convergence time, the convolutional approach is clearly the stronger candidate for this task. Due to the short descriptions and semantically categorical values of the tags, the natural language capacities of the LSTM cannot flourish.\nResults of both approaches next to each other. The columns indicate the accuracy for that specific task. It’s clear the convolutional approach has higher accuracy with lower convergence time.\nLastly, the data had big effects on the results. During my time at TAPP, the manual tagging continued, some labels were added, some removed, some relationships were changed. Combined with the human error that was present in the manually tagged products, this has a significant effect on the results. The categorization is still not completely finalized around aggregate products with descriptions like ‘open bar’ and combined products, like cocktails or mixers like Jack and Coke. These products are tagged as two separate products, where one has the other as a parent product. Whether the child product’s group is tagged as drinks or others is still a point of discussion. The same goes for product notes, like extra sauce on fries which are also tagged as a separate product, and where the same discussion is present but for whether it should be food or other. The (partial) automation of this tagging, paired with removed errors from the dataset should increase the model performance even more, and I think it is very feasible to get to 99% accuracy in some tasks, but the humans need to figure out how to perform this task before the machines can learn from it.\nBecause these results are not good enough to replace humans, I implemented a way to interact with the model using the old tagging process. Previously, a table extract is made, sent to the taggers, tagged, sent back and then re-uploaded to our data warehouse. The best way to implement the model is between the extraction and sending to the taggers. In the extracted file, there are columns added for each tag with the model’s prediction and its confidence. If the model is very sure (above 0.99 confidence) the prediction is already filled into the column the human taggers are going to fill. If the confidence is lower, the prediction can be regarded as a recommendation for the taggers. The result of this is as follows, where I removed the other tags for simplicity. Because the confidence is higher than 0.99, the prediction is already filled into the tag. Otherwise, tag_Group would be empty"
  },
  {
    "objectID": "posts/2020-07-24-automated-product-recognition-for-hospitality-industry-insights.html#future-work",
    "href": "posts/2020-07-24-automated-product-recognition-for-hospitality-industry-insights.html#future-work",
    "title": "Automated product recognition for hospitality industry insights 🍺",
    "section": "Future Work",
    "text": "Future Work\nSadly, I was not able to do everything I wanted. Among these are ideas that only recently occurred to me, when it was too late to do in-depth experiments. Even though I said earlier using pretrained weights would likely not yield much improvements, it should be checked out to confirm my hypotheses.\nAdditionally, in my convolutional approach I used only one convolution layer. To bridge some of the distance gap that is present using convolutional layers it might be very fruitful to add more convolutional layers with pooling in between. This way, higher order sentence structures or relations between tags and words can become apparent that are currently lost.\n\nCurious?\nIf you would like to know more about this project, please comment or send me a message on LinkedIn or hit me up on twitter."
  },
  {
    "objectID": "posts/2020-08-20-spotify-listening-history-analysis-part-3.html",
    "href": "posts/2020-08-20-spotify-listening-history-analysis-part-3.html",
    "title": "Analyzing my Spotify listening history 🎵 - Part 3",
    "section": "",
    "text": "In part 3 we are going to take a look at the audio features that Spotify labels songs with. They have 9 self-determined variables, that all indicate different aspects of a song. You’ll learn all about them below. In part 2, we looked at how my genres are and changed over time. Now we’ll take a look at how the audio features correspond to the changes in genres and how the genres are defined in the sense of these features.\nThe main research questions of part 3 are:\nLets start!"
  },
  {
    "objectID": "posts/2020-08-20-spotify-listening-history-analysis-part-3.html#danceability",
    "href": "posts/2020-08-20-spotify-listening-history-analysis-part-3.html#danceability",
    "title": "Analyzing my Spotify listening history 🎵 - Part 3",
    "section": "Danceability",
    "text": "Danceability\n\nDanceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.\n\nHere, we take a look at danceability. Given my main genres, we should see higher danceability than normally, with EDM being a big part of my listening. And indeed we do see this. In my distribution, we see quite some peaks around 0.8, while the general distribution has only a very small amount of songs with danceability higher than 0.8. Since we only have an image from spotify (and no actual data points), we cannot compare means, but I expect the general distribution mean to be somewhere between 0.5-0.6, while mine is 0.67"
  },
  {
    "objectID": "posts/2020-08-20-spotify-listening-history-analysis-part-3.html#energy",
    "href": "posts/2020-08-20-spotify-listening-history-analysis-part-3.html#energy",
    "title": "Analyzing my Spotify listening history 🎵 - Part 3",
    "section": "Energy",
    "text": "Energy\n\nEnergy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.\n\nNow, energy is a bit strange. In my year in review, Spotify always telling me I listen to so much energetic music. However, looking at this plot, I seem to be way lower than the general distribution.\n\n\n\n\n\n\nLet’s see if we get some more clarity if we look at the energy per artist.\n\n\n\n\n\n\nImportant\n\n\n\nFor this table and all that follow, the count is just the frequency count of that value, whatever that value might be. If it is an artist, it is the total number of times that artist was played. If it is a song, it is the number of times that song was played.\n\n\n\n\n\n\n\n\n  \n    \n      \n      energy\n    \n    \n      \n      count\n      mean\n    \n    \n      master_metadata_album_artist_name\n      \n      \n    \n  \n  \n    \n      6ix9ine\n      260\n      0.699400\n    \n    \n      KIDS SEE GHOSTS\n      302\n      0.691255\n    \n    \n      Fresku\n      264\n      0.657288\n    \n    \n      Tchami\n      370\n      0.644843\n    \n    \n      Netsky\n      466\n      0.639095\n    \n    \n      Kid Cudi\n      853\n      0.634662\n    \n    \n      Kendrick Lamar\n      2740\n      0.633111\n    \n    \n      Mac Miller\n      527\n      0.628738\n    \n    \n      Flume\n      593\n      0.627781\n    \n    \n      Travis Scott\n      265\n      0.623781\n    \n    \n      Yellow Claw\n      2533\n      0.618704\n    \n    \n      Various Artists\n      1594\n      0.618487\n    \n    \n      Eminem\n      1567\n      0.616364\n    \n    \n      Yung Internet\n      373\n      0.607120\n    \n    \n      G-Eazy\n      926\n      0.605303\n    \n    \n      Lil Dicky\n      303\n      0.588901\n    \n    \n      Kanye West\n      1070\n      0.571160\n    \n    \n      Parov Stelar\n      264\n      0.563025\n    \n    \n      Vitalic\n      275\n      0.543753\n    \n    \n      Frank Sinatra\n      804\n      0.512106\n    \n  \n\n\n\n\nThese results I find quite surprising. Yellow Claw, a Dutch trap duo whom I would consider to be generally pretty high energy is equal or below quite some hip hop artists, like Mac Miller and Kid Cudi. We can see the maximum energy in here is 6ix9ine, with a solid 0.69 😂. There is no denying that 6ix9ine is at that level of energy. However, KIDS SEE GHOSTS, the front for Kid Cudi and Kanye West, somehow also has 0.69, while I’d say that is much lower in energy. If we look at Reborn, the most popular song on the album, it’s clearly a pretty slow song.\n\nAlternatively, we can look at the energy of my top songs. Here we get a clearer picture of the effect of different songs.\n\n\n\n\n\n\n  \n    \n      \n      \n      energy\n    \n    \n      \n      \n      count\n      mean\n    \n    \n      master_metadata_album_artist_name\n      master_metadata_track_name\n      \n      \n    \n  \n  \n    \n      Kendrick Lamar\n      HUMBLE.\n      125\n      0.6210\n    \n    \n      DNA.\n      124\n      0.5230\n    \n    \n      ELEMENT.\n      93\n      0.7050\n    \n    \n      LOYALTY. FEAT. RIHANNA.\n      81\n      0.5350\n    \n    \n      YAH.\n      81\n      0.7000\n    \n    \n      FEEL.\n      80\n      0.7950\n    \n    \n      Travis Scott\n      goosebumps\n      99\n      0.7280\n    \n    \n      Yellow Claw\n      City on Lockdown (feat. Juicy J & Lil Debbie)\n      96\n      0.8410\n    \n    \n      Good Day (feat. DJ Snake & Elliphant)\n      87\n      0.5660\n    \n    \n      Open (feat. Moksi & Jonna Fraser)\n      87\n      0.5920\n    \n    \n      Without You (feat. The Galaxy & Gia Koka)\n      82\n      0.4880\n    \n    \n      Invitation (feat. Yade Lauren)\n      80\n      0.6620\n    \n    \n      Love & War (feat. Yade Lauren)\n      78\n      0.5330\n    \n    \n      Last Paradise (feat. Sody)\n      78\n      0.5930\n    \n    \n      Stacks (feat. Quavo, Tinie Tempah & Cesqeaux)\n      77\n      0.0812\n    \n  \n\n\n\n\nThere are some pretty interesting facts here. First of, we can see see that my idea of Yellow Claw being very high energy is debunked, at least with Spotify’s definition of energy. Because some of these values are very strange, even more so when compared to some other artists and songs. Take for example the song without you from Yellow Claw. This is a dubstep/brostep song, with a pretty high tempo but has a value of 0.4880 for its energy level. This is lower than Frank Sinatra had on average in the previous table. In my opinion, something is wrong there. Furthermore, we can also see that their song Stacks has an energy value of 0.0812, which, by all accounts, should be an anomaly. My expectation is that they trained a neural network with some hand labeled songs, and then applied that to all songs to estimate these values, and something went wrong in the case of this song."
  },
  {
    "objectID": "posts/2020-08-20-spotify-listening-history-analysis-part-3.html#instrumentalness",
    "href": "posts/2020-08-20-spotify-listening-history-analysis-part-3.html#instrumentalness",
    "title": "Analyzing my Spotify listening history 🎵 - Part 3",
    "section": "Instrumentalness",
    "text": "Instrumentalness\n\nPredicts whether a track contains no vocals. “Ooh” and “aah” sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly “vocal”. The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.\n\n\n\n\n\n\n\nThis is potentially interesting, since, naturally, hip-hop has a lot of vocals (so low instrumentalness), but genres like electro house and EDM generally don’t have many vocals, so how is this plot explained with almost nothing around 1. We can quickly see why by looking at the most influential artists for the largest genres. I’m showing the top 10 most played artists with their largest genre (e.g. if an artist is tagged as ‘rap’ and ‘west coast hip hop’, we use the more general rap)\n\n\n\n\n\n\n  \n    \n      \n      \n      count\n    \n    \n      top_1_genres\n      master_metadata_album_artist_name\n      \n    \n  \n  \n    \n      edm\n      Yellow Claw\n      2531\n    \n    \n      Flume\n      592\n    \n    \n      Tchami\n      370\n    \n    \n      rap\n      Kendrick Lamar\n      2738\n    \n    \n      Eminem\n      1564\n    \n    \n      Kanye West\n      1065\n    \n    \n      G-Eazy\n      926\n    \n    \n      Kid Cudi\n      852\n    \n    \n      Mac Miller\n      527\n    \n    \n      Lil Dicky\n      303\n    \n  \n\n\n\n\nAs most influential EDM artists, we see Yellow Claw and Flume, both of which have a lot of vocals in their music. This explains our instrumentalness plot!.\nHowever, if we redo this analysis, but we drop the most general genres, we get much more interesting results. To be specific, I’ve ignored the values pop, edm, rap, pop rap and hip hop, unless there were no other genre labels. In that case, we still take that genre. The result is below, and quite interesting. The table shows the top 20 most played artists and the genre they belong to.\n\n\n\n\n\n\n  \n    \n      \n      \n      master_metadata_album_artist_name\n    \n    \n      top_1_genres_filtered\n      master_metadata_album_artist_name\n      \n    \n  \n  \n    \n      chicago rap\n      Kanye West\n      1065\n    \n    \n      christmas\n      Frank Sinatra\n      804\n    \n    \n      conscious hip hop\n      Kendrick Lamar\n      2738\n    \n    \n      detroit hip hop\n      Eminem\n      1564\n    \n    \n      downtempo\n      Flume\n      592\n    \n    \n      Parov Stelar\n      263\n    \n    \n      dutch hip hop\n      Yung Internet\n      373\n    \n    \n      Fresku\n      263\n    \n    \n      electro house\n      Yellow Claw\n      2531\n    \n    \n      Tchami\n      370\n    \n    \n      Vitalic\n      274\n    \n    \n      emo rap\n      6ix9ine\n      260\n    \n    \n      house\n      FISHER\n      247\n    \n    \n      indie pop rap\n      G-Eazy\n      926\n    \n    \n      liquid funk\n      Netsky\n      466\n    \n    \n      rap\n      Kid Cudi\n      852\n    \n    \n      Mac Miller\n      527\n    \n    \n      Lil Dicky\n      303\n    \n    \n      KIDS SEE GHOSTS\n      302\n    \n    \n      Travis Scott\n      264\n    \n  \n\n\n\n\nWithout the super general genres, we can finally start to see some trends. Given the fact that rap is still the main genre of 5 artists, this often seems to be one of few labels applied, possibly with the other labels I was removing. The results is that these artists do not belong to any specific subgenres within hip hop, which is cool to see. Does this also mean they are per definition mainstream?\n\n\n\n\n\n\nNote\n\n\n\nIn part 2, the question arose of why emo rap was one of my main genres in some months. This is also explained by this plot, because 6ix9ine is regarded as emo rap by spotify, and his presence in my listening is very varied, with sometimes none and sometimes quite a bit."
  },
  {
    "objectID": "posts/2020-08-20-spotify-listening-history-analysis-part-3.html#loudness",
    "href": "posts/2020-08-20-spotify-listening-history-analysis-part-3.html#loudness",
    "title": "Analyzing my Spotify listening history 🎵 - Part 3",
    "section": "loudness",
    "text": "loudness\n\nThe overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typical range between -60 and 0 db.\n\n\n\n\n\n\n\nWe can see my music is quite a bit louder than average, with almost all of the mass of the distribution being between -10 and 0, with a small tail between -15 and -10. In the general distribution, the tail extends quite a bit beyond -20, whereas there is virtually nothing beyond -18 in my distribution. Let’s see who is responsible for all of this noise 😠. Let’s plot the loudness of my top 20 most listened artists.\n\n\n\n\n\n\n  \n    \n      \n      loudness\n    \n    \n      \n      count\n      mean\n    \n    \n      master_metadata_album_artist_name\n      \n      \n    \n  \n  \n    \n      6ix9ine\n      260\n      -5.624454\n    \n    \n      Travis Scott\n      265\n      -5.832879\n    \n    \n      Kid Cudi\n      853\n      -6.496838\n    \n    \n      Kanye West\n      1070\n      -6.535216\n    \n    \n      KIDS SEE GHOSTS\n      302\n      -6.612129\n    \n    \n      Fresku\n      264\n      -6.614091\n    \n    \n      Netsky\n      466\n      -6.690002\n    \n    \n      G-Eazy\n      926\n      -6.849693\n    \n    \n      Yellow Claw\n      2533\n      -6.875627\n    \n    \n      Kendrick Lamar\n      2740\n      -7.033027\n    \n    \n      Eminem\n      1567\n      -7.094228\n    \n    \n      Various Artists\n      1594\n      -7.189992\n    \n    \n      Tchami\n      370\n      -7.304330\n    \n    \n      Flume\n      593\n      -7.348245\n    \n    \n      Mac Miller\n      527\n      -7.576696\n    \n    \n      Parov Stelar\n      264\n      -7.825705\n    \n    \n      Yung Internet\n      373\n      -7.844906\n    \n    \n      Vitalic\n      275\n      -8.272200\n    \n    \n      Frank Sinatra\n      804\n      -8.528413\n    \n    \n      Lil Dicky\n      303\n      -9.120274\n    \n  \n\n\n\n\nThis table is pretty clear. We see that none of my top 20 most played artists have an average loudness lower than -10, indicating quite high loudness on average. If we look at the top 5, we see that apparently hip hop artists are very loud, but also specifically Kid Cudi, Kanye West, and then those two combined in KIDS SEE GHOSTS. The reason for this I expect to be that they have sounds playing at almost at all times, rather than that they are extremely loud in their peaks.\nIt also comes as no surprise that 6ix9ine is the loudest, since he’s essentially screaming in most of his songs 😅."
  },
  {
    "objectID": "posts/2020-08-20-spotify-listening-history-analysis-part-3.html#valence",
    "href": "posts/2020-08-20-spotify-listening-history-analysis-part-3.html#valence",
    "title": "Analyzing my Spotify listening history 🎵 - Part 3",
    "section": "valence",
    "text": "valence\n\nA measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\n\nThis is a very interesting feature. Let’s see what information it gives us!\n\n\n\n\n\n\nThat’s quite the difference! First off, we can see a clear decline towards 1.0 for my distribution, whereas in the general distribution, this is much rounder. Furthermore, we can see that my distribution a lot spikier, possibly indicating the effects of certain albums/songs that have been played a lot and have a very narrow spread with regards to valence. In general we can see my music taste leans more towards the low side of valence, indicating a preference for sad, depressed and angry music. In general, I think it will be angry, which is the sentiment in a lot of hip hop, but also techno, drum and bass and some parts of house.\nIf we look at the most positive and most negative songs with more than 5 plays, we see some interesting results.\n\n\n\n\n\n\n  \n    \n      \n      \n      valence\n    \n    \n      \n      \n      count\n      mean\n    \n    \n      master_metadata_album_artist_name\n      master_metadata_track_name\n      \n      \n    \n  \n  \n    \n      Lil Dicky\n      White Crime\n      19\n      0.00000\n    \n    \n      Eminem\n      White America\n      31\n      0.00000\n    \n    \n      Kanye West\n      Fade\n      37\n      0.00000\n    \n    \n      Ellen Allien\n      Stormy Memories\n      10\n      0.00001\n    \n    \n      Hollen\n      Sleeping Dogs - Original\n      11\n      0.01400\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      Ed Sheeran\n      Shape of You\n      9\n      0.93100\n    \n    \n      Fresku\n      Chickie (skit)\n      15\n      0.93800\n    \n    \n      Victor Ruiz\n      Brujeria\n      7\n      0.96000\n    \n    \n      Kendrick Lamar\n      Momma\n      36\n      0.96300\n    \n    \n      Yung Internet\n      Helemaal Top (feat. Donnie)\n      48\n      0.96300\n    \n  \n\n1171 rows × 2 columns\n\n\n\nWe can see that there are likely some errors in here, with White Crime and White America both having a score of 0.0. On the positive side, we see Yung Internet with Helemaal Top, which is a song about feeling great. Furthermore, we have Kendrick Lamar’s Momma. This is interesting cause it does not typically resonate as a very happy or cheerful song. We’ll attribute this to the Spotify interpretation of this value. See for yourself:\n\nIf we take a higher level view, we can look at the artists and identify more broader trends.\n\n\n\n\n\n\n  \n    \n      \n      valence\n    \n    \n      \n      count\n      mean\n    \n    \n      master_metadata_album_artist_name\n      \n      \n    \n  \n  \n    \n      Kanye West\n      1070\n      0.327687\n    \n    \n      Tchami\n      370\n      0.360095\n    \n    \n      Netsky\n      466\n      0.383689\n    \n    \n      KIDS SEE GHOSTS\n      302\n      0.414606\n    \n    \n      Yellow Claw\n      2533\n      0.430344\n    \n    \n      Frank Sinatra\n      804\n      0.434713\n    \n    \n      Lil Dicky\n      303\n      0.445153\n    \n    \n      G-Eazy\n      926\n      0.445842\n    \n    \n      Mac Miller\n      527\n      0.462410\n    \n    \n      Kendrick Lamar\n      2740\n      0.469246\n    \n    \n      Various Artists\n      1594\n      0.476991\n    \n    \n      Kid Cudi\n      853\n      0.486193\n    \n    \n      Eminem\n      1567\n      0.493737\n    \n    \n      Yung Internet\n      373\n      0.511973\n    \n    \n      Flume\n      593\n      0.575045\n    \n  \n\n\n\n\nSome interesting insights: 1. Kanye is depressing: Kanye West is very low in valence, meaning most of his songs are angry, depressed or sad. This makes sense, given his oeuvre, with songs like Waves (sad), Violent Crimes (sad), Piss On Your Grave (angry) and I Am A God (angry). 2. Bias of electronic music: We have some electronic artists like Tchami and Netsky which also rank very low, but which are not specifically angry or sad music producers in my experience. Maybe electronic music has a bias here and is faster to be considered angry or sad? 3. Non-polarity: We see quite some artists hovering around 0.5, indicating either a healthy balance in valence between their songs or just a general non-polarity in their songs. I took a detailed look at Kanye West for the first point, and he has a wide spread, with the weight more on the sad and angry side, hence his low average valence. I assume most artists will be similar, and have a wide spread between their songs."
  },
  {
    "objectID": "posts/2020-08-20-spotify-listening-history-analysis-part-3.html#energy-in-rap-and-edm",
    "href": "posts/2020-08-20-spotify-listening-history-analysis-part-3.html#energy-in-rap-and-edm",
    "title": "Analyzing my Spotify listening history 🎵 - Part 3",
    "section": "Energy in Rap and EDM",
    "text": "Energy in Rap and EDM\n\n\n\n\n\n\nImportant\n\n\n\nFrom here one out, all plots are again interactive. Try to disable some things in the legend!\n\n\nGiven our results in previous sections, one of the things I’d like to look deeper into is the effects of EDM and rap with regards to energy.\n\n\n\n\n\n\n\nAbove, we see the Kernel Density Estimation (KDE) of energy for rap and EDM. Rap is strange, since it seems to have two distinct peaks; one around 0.6 and one around 0.75. EDM has a more well defined single peak at 0.6. Furthermore, we see that EDM is more prevalent in the high energy values, which is not too unsurprising to see. Let’s dive a bit deeper into the two peaks of rap.\nIf we plot different hip hop subgenres, we can see how these peaks come to be. We plot the largest three hip hop subgenres. Detroit hip hop seems to have more of a peak around 0.75, while conscious hip hop and chicago rap have peaks around at 0.6. It seems that they have a lot more energy in Detroit!"
  },
  {
    "objectID": "posts/2020-08-20-spotify-listening-history-analysis-part-3.html#valence-in-rap-and-edm",
    "href": "posts/2020-08-20-spotify-listening-history-analysis-part-3.html#valence-in-rap-and-edm",
    "title": "Analyzing my Spotify listening history 🎵 - Part 3",
    "section": "Valence in Rap and EDM",
    "text": "Valence in Rap and EDM\n\n\n\n\n\n\n\nWe can see some interesting differences in valence for these genres. We observe that EDM is more prevalent in the low valence values (0.0-0.2), dropping to zero much later than rap. Rap, on the other hand, is more prevalent in the 0.3-0.5 range than EDM. Now, we still don’t know if 0.5 valence means it is neutral, but it can tell us at least that rap is on average less sad and angry than EDM, which I find an interesting discovery, since I would have guessed it the other way around."
  },
  {
    "objectID": "posts/2023-02-15-genetic-algorithms.html",
    "href": "posts/2023-02-15-genetic-algorithms.html",
    "title": "Genetic Algorithms for image reconstruction 🧬",
    "section": "",
    "text": "Figure 1: Best individual, target and two loss metrics\n\n\nGenetic algorithms are a beautiful subset in the machine learning domain, that use evolutionairy techniques to arrive to solutions that other algorithms have trouble at. These techniques include the combining of solutions, often called crossover, and the slightly altering of solutions, called mutations.\nIn this post, I’ll show two versions genetic algorithms that can be used for image reconstruction given a target image. In the real world, it will have few applications but it’s a great theoretical exercise and practice for understanding of the algorithms and image manipulation. However, they are unmistakingly usefull and have been applied in many domains, one being Neural Architecture Search, a method to find the best architecture for a neural network given a specific problem.\nWhile other optimization methods, such a gradient descent are incredibly powerful for problems that provide a smooth non-stochastic optimization curve. However, for problems that might have many different good solutions that are not easily findable following a single trajectory in parameter space, genetic algorithms can provide unexpected solutions.\nAs in nature, genetic algorithms are based on natural selection and survival of the fittest. That means that each iteration, we select the best candidates for the problem at hand and continue with those. Each individual represents a solutions, and by slightly altering and combining solutions we hope to come to a better solution each iteration. As you can understand, this is a very generic approach that can be applied to all types of problems.\n\n\nGenerally, the algorithms for genetic algorithms follows roughly the same outline and is as follows:\npop = create initial popluation with n individuals\n\nfor i in n_iterations:\n    1. randomly combine/reproduce individuals\n    2. randomly mutate individuals\n    3. retain fittest individuals\n\n\n\nLet’s start with the most simple version of changes made to candidates: mutations. In any organism with DNA (or some form of it), we see mutations; slight changes in the genetic code. In organism, it’s typically the results of an incorrect copy of DNA code, but in this case we are intentionally applying mutation to create slight variations.\nFor human cells, a mutated cell can start to misbehave, which is generally cleaned up by our immune system. However, sometimes they’re missed or not easy to clean up and can lead to serious consequences such as cancer. We also know mutations from sci-fi and monster stories, which result in zombies and the like, but that’s unfortunately not what we are talking about today.\n\n\n\nProcreation is very important for this algorithm, because it allows the combining of two (or more) individuals into a new individual. Hopefully, this leads to to an individual that has all good qualities of their parents and none of the bad. In the rest of this post, the terms procreation, crossover and combine are used interchangeably for this concept.\nAn example with two individuals and their crossover. In this example, and individual is defined by its genes: 4 binary digits. The crossover in this case is just taking the first two digits of the first individual and the latter two of the second individual.\n\nind1 = [0, 0, 0, 0]\nind2 = [1, 1, 1, 1]\n\ndef crossover(a, b):\n  return a[:2] + b[2:]\n\nprint(f'Result of crossover: {crossover(ind1, ind2)}')\n\nResult of crossover: [0, 0, 1, 1]\n\n\n\n\n\nTo assess which individuals are the most fit, you need some metric. Depending on the problem, naturally you can use many different versions. In our case, image reconstruction, we are going to use the mean-squared error of the pixel values \\(l = \\frac{1}{n} \\sum_{i=1}^{n}(c_i - T)^2\\) where \\(n\\) is the size of the population, \\(c_i\\) is candidate \\(i\\) and \\(T\\) the target image. This works nicely with our data and as always, penalizes the largest errors the most."
  },
  {
    "objectID": "posts/2023-02-15-genetic-algorithms.html#pixelwise",
    "href": "posts/2023-02-15-genetic-algorithms.html#pixelwise",
    "title": "Genetic Algorithms for image reconstruction 🧬",
    "section": "Pixelwise",
    "text": "Pixelwise\nIn this method, we try to recreate the target image by manipulating individual pixels and comibing whole pixel arrays. The genes of an individual is a pixel array the size of the target image. For some RGB image, this will be a three dimensional, for example (200, 200, 3).\nLet’s first deine a pixel individual and set its genes to the shape that we want. We also give an option to pass genes, which is handy for the crossover step later. Lastly, we define that probability to mutate mutate_p and the delta of a mutation mutate_d. The main methods of the individual are already defined here as well.\n\nclass PixelIndividual:\n    \"\"\"Individual with pixel grid for genes.\"\"\"\n\n    def __init__(\n        self,\n        shape: Tuple,\n        genes: np.ndarray | None = None,\n        mutate_d: float = 0.05,\n        mutate_p: float = 0.2\n    ):\n        self.shape = shape\n        self.mutate_d = mutate_d\n        self.mutate_p = mutate_p\n        if genes is None:\n            self.genes = (np.random.rand(*shape)).astype(np.float32)\n        else:\n            self.genes = genes\n\n\nCrossover\nThe second method is our choice of what happens during crossover. How to implement a crossover function is really up to the person working on the problem. Initially I just took the pixelwise mean of both parents, but that seemed to always kind of move towards hovering around 0.5, which is maybe logical, but definitely undesirable. In this version, I chose to randomly take each pixel from either parent. This seems to work fairly well but you can use many other versions so make sure to play around with this a bit yourself. The filter_arr creates an array of random zeros and ones. We use it as a filter to decide which value to pick.\n\n def crossover(self, other: PixelIndividual) -> PixelIndividual:\n        filter_arr = np.random.randint(low=0, high=2, size=self.genes.shape)\n        output = np.where(filter_arr, self.genes, other.genes)\n        return PixelIndividual(shape=self.shape, genes=output)\n\n\n\nMutation\nThen, onto the mutation part, which is fairly simple. We just create some noise of a certain magnitude, shift it so half of it is negative and add it to the existing pixel values of said candidate. In the plot below you can see the distribution of a mutation for an individual with 100x100 grid as genes. I have chosen a uniform distribution for this, but again, you can choose others such as normal. However, the domain of the uniform distribution is simple and intuitive. For example, scaling an uniform distribution with 0.2 will have a magnitude of 0.2 as well. ranging from 0 to 0.2 distributed evenly. So you can see why working with this distribution is nice.\n\n\n\n\n\nAs a last step, we apply the mutation and clip the values to the range [0, 1]. This is because otherwise we can mutate outside of the colour boundaries of an image, which will be clipped when shown as an image anyway. The domain for pixel values with a float is [0, 1] or [0, 255] for integer values, and plotting libraries like matplotlib will clip values for you if you don’t. To prevent hidden problems, we already make sure the domains and datatypes are correct.\n\n    def mutate(self):\n        if self.mutate_p > np.random.rand():\n            self.mutation = (np.random.rand(*self.shape) * self.mutate_d) - (self.mutate_d * 0.5)\n            self.mutation = self.mutation.astype(np.float32)\n            self.genes = np.clip(self.genes + self.mutation, a_min=0.0, a_max=1.0)\n\nBecause I encountered a lot of datatype issues, such as float64 and integer reprentations, I cast most computation to float32 and also do a dtype check in the compute_fitness method. This is because this is the last step of each iteration, and generally should represent if things went correctly.\nThe fitness method is in this case the mean-squared error.\n\n    def compute_fitness(self, target: np.ndarray):\n        assert self.genes.dtype.name == 'float32', (\n            f'genes dtype should be float32 but found {self.genes.dtype.name}.'\n        )\n        self.fitness = ((self.genes - target) ** 2).mean()\n\n\n\nResult\nSome of the results are pretty cool. With smaller images, it works quite fast but for larger it can take several hours to several days to get any good results. The mario image took around 12 hours to create, and while you can clearly see the outlines, it’s far from perfect.\n\nToy example: 10x10 matrix\nThis run is for just 200 iterations and takes around a minute. The right most graph shows the fitness distribution of the current population. The fitness function here was sum of squared errors, rather than mean.\n\n\n\nFigure 2: Best individual, target and two loss metrics of a 10x10 pixel grid with 4 dots\n\n\n\n\nSlightly less toy example: 100x100 matrix with gradient\nThis run is for 10k iterations and takes around a 1-2 hours. The right most graph shows the fitness distribution of the current population. You can see the graph struggle to show a clear distribution. This seems to mean that the whole distribution is very close, although the values on the x-axis are pretty big, so I’m not entirely sure why it cannot show a good distribution.\nYou can see an immediate steep decline in loss, which is attributed to the initial high variety in individuals. The further the iterations go, the more we have selected the optimal individuals and the more of the population can be considered brothers and sisters of the original best individual. When the problem is complex and high-dimensional, this happens more and more, since it’s quite unlikely that other candidates can present a better solution from mutation within the timeframe of the best candidate taking over the population.\n\n\n\nFigure 3: Best individual, target and two loss metrics of a 100x100 pixel grid with gradient"
  },
  {
    "objectID": "posts/2020-07-31-spotify-listening-history-analysis-part-1.html",
    "href": "posts/2020-07-31-spotify-listening-history-analysis-part-1.html",
    "title": "Analyzing my Spotify listening history 🎵 - Part 1",
    "section": "",
    "text": "Important\n\n\n\nI added a Day of Week vs Hour of day plot to visualize weekly behaviour!\nI like to have everything in my life tracked in some way. Preferably, knowingly (Looking at you, Facebook), cause it allows you to analyze the data and find interesting things (Might be related with becoming a data scientist)! I’ve always been a fan of the features provided by Last.fm to track you listening behaviour across apps and platforms. It allows you to see stuff like your favorite artists per month, or your affinity with certain genres over time like in the image below.\nBuuuuuut, like Last.fm, most of these analyses are paid completely or partly. In the case of Last.fm, you get this plot for free but anything more will cost you some paper. I’m Dutch, so let’s see if we can do it ourselves!\nI wanted to have my listening history, and currently there is an API call that provides that functionality. However, I wanted to do this at the start of 2019 (Last year was pretty busy, so I didn’t get around to doing this until now 😅) and this wasn’t available back then, or at least I couldn’t find it. Spotify, like many other companies, has an option to download your personal information. Unfortunately, this data only contained data for three months (they upped it to a year now, which is great!).\nBut, given this limitation, the only way I could think of to get this was to ask Spotify for my personal data. Under the GDPR, they are required to provide this information, so I thought this had a good shot. Well, after e-mailing back and forth a whole bunch of times, eventually I got in touch with the Data Privacy Office and they provided me with my complete listening history!\nSo that’s the data that we’ll be working with. Like I said, I requested the data in early 2019, so my history goes from my beginning of Spotify (ca. 2013) until then. So lets see what we’re dealing with."
  },
  {
    "objectID": "posts/2020-07-31-spotify-listening-history-analysis-part-1.html#the-data",
    "href": "posts/2020-07-31-spotify-listening-history-analysis-part-1.html#the-data",
    "title": "Analyzing my Spotify listening history 🎵 - Part 1",
    "section": "The Data ✨",
    "text": "The Data ✨\nI received one main file from spotify called EndSong.json which had json items as follows. In total, I got 39,229 songs played, which is quite a lot and definitely enough to do some interesting things with!\n{\n    \"ts\":\"2013-10-09 20:03:57 UTC\",\n    \"username\":\"xxxxxxxxxx\",\n    \"platform\":\"xxxxxxx\",\n    \"ms_played\":\"5969\",\n    \"conn_country\":\"NL\",\n    \"ip_addr_decrypted\":\"xx.xx.xx.xx\",\n    \"user_agent_decrypted\": \"xxxxxxxxxxx\",\n    \"master_metadata_track_name\":\"You Make Me\",\n    \"master_metadata_album_artist_name\":\"Avicii\",\n    \"master_metadata_album_album_name\":\"You Make Me\",\n    \"reason_start\":\"click-row\",\n    \"reason_end\":\"click-row\",\n    \"shuffle\":false,\n    \"skipped\":false,\n    \"offline\":false,\n    \"offline_timestamp\":\"0\",\n    \"incognito_mode\":false,\n    \"metro_code\":\"0\",\n    \"longitude\":0,\n    \"latitude\":0\n}\nFor our analysis, we’re gonna use the ol’ trusty Pandas. The data is in the json-lines format, so we use the python json-lines package to read our data. We’ll also drop some useless columns and convert the timestamp column to a python datetime object. Furthermore, we use the UTF-8 encoding while reading our data, to support tokens that would otherwise be malformed like the ë character. Lastly, we also create separate columns for many of our time attributes like year, month and day, since this makes it easy for filtering during plotting.\n\n\n\n\n\n\nTip\n\n\n\nThe json-lines format puts a json object on each separate line, and allows for very dense information packaging in json files. Before I knew this, I was reading the data as a string, converting true->True and false->False, to match python syntax and then using the ast package to interpret the string as a python object. That also worked ok, but this is much better. 😊\n\n\n\nlines = []\nfor i in json_lines.reader(open('data/EndSong.json', encoding='utf-8')):\n    lines.append(i)\ndf = pd.DataFrame(lines)\n\n\n\nCode\ndf = df.drop(['username', 'user_agent_decrypted', 'incognito_mode', 'platform', 'ip_addr_decrypted'], axis=1)\ndf.ts = pd.to_datetime(df.ts)\ndf['date'] = df.ts.dt.date\ndf['year'] = df.ts.dt.year\ndf['month'] = df.ts.dt.month\ndf['day'] = df.ts.dt.day\ndf['dow'] = df.ts.dt.dayofweek\ndf['hour'] = df.ts.dt.hour\ndf.head(4)\n\n\n\n\n\n\n  \n    \n      \n      ts\n      ms_played\n      conn_country\n      master_metadata_track_name\n      master_metadata_album_artist_name\n      master_metadata_album_album_name\n      reason_start\n      reason_end\n      shuffle\n      skipped\n      ...\n      city\n      region\n      episode_name\n      episode_show_name\n      date\n      year\n      month\n      day\n      dow\n      hour\n    \n  \n  \n    \n      0\n      2013-10-09 20:24:30+00:00\n      15010\n      NL\n      Wild for the Night (feat. Skrillex & Birdy Nam...\n      A$AP Rocky\n      LONG.LIVE.A$AP (Deluxe Version)\n      unknown\n      click-row\n      False\n      False\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      2013-10-09\n      2013\n      10\n      9\n      2\n      20\n    \n    \n      1\n      2013-10-09 20:19:20+00:00\n      68139\n      NL\n      Buzzin'\n      OVERWERK\n      The Nthº\n      unknown\n      click-row\n      False\n      False\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      2013-10-09\n      2013\n      10\n      9\n      2\n      20\n    \n    \n      2\n      2013-10-09 20:21:54+00:00\n      23643\n      NL\n      Blue\n      Gemini\n      Blue EP\n      unknown\n      click-row\n      False\n      False\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      2013-10-09\n      2013\n      10\n      9\n      2\n      20\n    \n    \n      3\n      2013-10-09 20:20:29+00:00\n      68063\n      NL\n      Blue\n      Gemini\n      Blue EP\n      unknown\n      click-row\n      False\n      False\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      2013-10-09\n      2013\n      10\n      9\n      2\n      20\n    \n  \n\n4 rows × 25 columns"
  },
  {
    "objectID": "posts/2020-07-23-first-personal-post.html",
    "href": "posts/2020-07-23-first-personal-post.html",
    "title": "Introduction to personal website",
    "section": "",
    "text": "Introduction to personal website\nWelcome!\n\nAfter fighting with setting up a custom domain, I’ve not officially set out to write about some interesting topics here. The main challenge for me, by length, will be to work towards rounding something of within a limited amount of time. I always get sucked into diving way too deep into a topic, to a point where I’m not knowledgeable enough anymore to understand, and then I lose interest :sweat_smile:. This time will definitely be different!\nWhat do I want to do here? I’d like to write about interesting stuff I find online, discover or think of! Yes, very original :). What does this mean, concretely?\nI’m going to talk about: - Deep learnig - Machine learning - Reinforcement Learning - Natural language processing - Computer Vision - Whatever else I find interesting. I can do what I want, mom!\nCurrent impediments for realizing my dreams: - How do you use latex here? \\(\\lambda\\), does this work? - Finding some good topics.\n\nThanks and hope to see you!"
  },
  {
    "objectID": "posts/2020-08-07-spotify-listening-history-analysis-part-2.html",
    "href": "posts/2020-08-07-spotify-listening-history-analysis-part-2.html",
    "title": "Analyzing my Spotify listening history 🎵 - Part 2",
    "section": "",
    "text": "In part 1 of this series we looked at the first part of this project. This included: 1. The data we are working with and what it looks like. 2. The amount of listening done per year and per month. 3. The amount of listening done per hour of day, also throughout the years. 4. The amount of genres we have per song/artist.\nWe will continue from where we left of, diving deeper into the genres.\nWe’ll load up the original JSON from Spotify, as well as the genres we created in part 1. We then combine them into comb, the combined dataframe. In genres.csv, we again see the 20 columns with the genres for each song, where the genres are collected from the artist, since songs are not labeled as having a genre. For more details, please have a look at part 1.\n\n# data received from Spotify\ndf.head(1)\n\n\n\n\n\n  \n    \n      \n      ts\n      ms_played\n      conn_country\n      master_metadata_track_name\n      master_metadata_album_artist_name\n      master_metadata_album_album_name\n      reason_start\n      reason_end\n      shuffle\n      skipped\n      ...\n      city\n      region\n      episode_name\n      episode_show_name\n      date\n      year\n      month\n      day\n      dow\n      hour\n    \n  \n  \n    \n      0\n      2013-10-09 20:24:30+00:00\n      15010\n      NL\n      Wild for the Night (feat. Skrillex & Birdy Nam...\n      A$AP Rocky\n      LONG.LIVE.A$AP (Deluxe Version)\n      unknown\n      click-row\n      False\n      False\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      2013-10-09\n      2013\n      10\n      9\n      2\n      20\n    \n  \n\n1 rows × 25 columns\n\n\n\nGenres retrieved from Spotify and the combined dataframe. We rename the genres columns from just a number 0-20 to ‘genre_x’ with x between 0 and 20, so they’re easier to recognize.\ncomb consists of df + genres_df, with the genre columns at the end.\n\n# genres retrieved through Spotify API\ngenres_df = pd.read_csv('genres.csv', low_memory=False)\ngenres_df = genres_df.rename(columns={str(x): f'genre_{x}' for x in range(21)})\ncomb = pd.concat([df, genres_df], axis=1)\ncomb.head(2)\n\n\n\n\n\n  \n    \n      \n      ts\n      ms_played\n      conn_country\n      master_metadata_track_name\n      master_metadata_album_artist_name\n      master_metadata_album_album_name\n      reason_start\n      reason_end\n      shuffle\n      skipped\n      ...\n      genre_11\n      genre_12\n      genre_13\n      genre_14\n      genre_15\n      genre_16\n      genre_17\n      genre_18\n      genre_19\n      genre_20\n    \n  \n  \n    \n      0\n      2013-10-09 20:24:30+00:00\n      15010\n      NL\n      Wild for the Night (feat. Skrillex & Birdy Nam...\n      A$AP Rocky\n      LONG.LIVE.A$AP (Deluxe Version)\n      unknown\n      click-row\n      False\n      False\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1\n      2013-10-09 20:19:20+00:00\n      68139\n      NL\n      Buzzin'\n      OVERWERK\n      The Nthº\n      unknown\n      click-row\n      False\n      False\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n2 rows × 46 columns"
  },
  {
    "objectID": "posts/2020-08-07-spotify-listening-history-analysis-part-2.html#top-genres-with-percentages",
    "href": "posts/2020-08-07-spotify-listening-history-analysis-part-2.html#top-genres-with-percentages",
    "title": "Analyzing my Spotify listening history 🎵 - Part 2",
    "section": "Top genres with percentages 📊",
    "text": "Top genres with percentages 📊\n\n\nCode\nselection = alt.selection_multi(fields=['genre'], bind='legend')\n\nnormalized = alt.Chart(top_genres_per_month_with_perc).mark_bar().encode(\n    x=alt.X('yearmonth(datetime):O', title='Month per year'),\n    y=alt.Y('percentage', stack='normalize', title='Normalized percentage (%)'),\n    color = alt.Color(\n        'genre',\n        scale=alt.Scale(\n           scheme='tableau20',\n        )\n    ),\n    tooltip=['genre', 'percentage', 'yearmonth(datetime)'],\n    order=alt.Order(\n      'percentage',\n      sort='descending'\n    ),\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))\n).properties(\n    title='Normalized percentage occurences of top 5 genres per month',\n    width=MAXWIDTH\n).add_selection(\n    selection\n)\n\nnon_normalized = alt.Chart(top_genres_per_month_with_perc).mark_bar().encode(\n    x=alt.X('yearmonth(datetime):O', title='Month per year'),\n    y=alt.Y('percentage', title='Percentage (%)'),\n    color = alt.Color(\n        'genre',\n        scale=alt.Scale(\n           scheme='tableau20',\n        )\n    ),\n    tooltip=['genre', 'percentage', 'yearmonth(datetime)'],\n    order=alt.Order(\n      'percentage',\n      sort='descending'\n    ),\n    opacity=alt.condition(selection, alt.value(1), alt.value(0.2))\n).properties(\n    title='Percentage occurences of top 5 genres per month', \n    width=MAXWIDTH\n).add_selection(\n    selection\n)\n\nnon_normalized & normalized\n\n\n\n\n\n\n\n\nThere are definitely some interesting things in theses plots. We can see some consistent attendees that we also saw in the most listened genres in general, so that’s not a big surprise. For example, these include rap, edm and hip hop.\n\nSeasonal effects: What is quite interesting is to see when the very common genres are not dominating the chart, like in December of 2016. Both in November and December of 2016 we see I was in a very strong Christmas mood, with christmas covering 16% of songs in November and 51%(!) in December. The top genres in December are adult standard, easy listening, christmas and lounge. Those definitely are in the same segment, with my listening, so it’s not surprising that those other genres appear alongside Christmas in a heavy Christmas month. This is because my Christmas music is more focused on the 40s and 50s, with artists like Frank Sinatra and Dean Martin, rather than Mariah Carey. We do not see this seasonal effect in 2017 and 2018, but those years my Christmas music urge was just less, so this drop is explainable. Instead of Christmas, in December of 2018 emo rap is in my top 5 genres 🤔. That might be interesting to look at in another blog post.\nElectronic periods: Something else that stands out is that there are electronic music periods, like June, July and August of 2017 and January of 2018. However, both edm and electro house are present in essentially each month as high scorers, so I’m definitely a fan in general. But these peak months still stand out.\nRise of Rap: The last thing that is interesting is probably the fact that rap and hip hop have almost exclusively been the top 2 from February 2018 to January 2019. This indicates a move away from the more electronic genres and more towards hip hop. A possible reason for this might be the move towards more set-based plays for electronic music, which are generally not on Spotify, but on platforms like Youtube. Otherwise, it might just be an actual preference shift. However, I do still listen to a lot of these types of music, so I suspect the former. Looking at data from 2019 and 2020 might give some insight in this."
  },
  {
    "objectID": "posts/2020-08-07-spotify-listening-history-analysis-part-2.html#top-genres-without-percentages",
    "href": "posts/2020-08-07-spotify-listening-history-analysis-part-2.html#top-genres-without-percentages",
    "title": "Analyzing my Spotify listening history 🎵 - Part 2",
    "section": "Top genres without percentages 🏆",
    "text": "Top genres without percentages 🏆\nSo we’ve seen how the genres relate to each other in terms of percentages per month. We can also see what the top genres are per month, but it can definitely still be improved. I really just want a list with the top 5 genres per month, ideally easily readable and pretty close to the example we had from Last.fm.\nAs a reminder, that looked like this:\n\n\n\n\n\nYour top genres, plotted per week.\n\n\nWe can get a list of the top genres per month by grouping and then applying list on the Series.\n\ntop_genres_per_month = top_genres_per_month_with_perc.groupby(['year',  'month']).genre.apply(list).reset_index()\ntop_genres_per_month[:2]\n\n\n\n\n\n  \n    \n      \n      year\n      month\n      genre\n    \n  \n  \n    \n      0\n      2016\n      9\n      [rap, pop rap, hip hop, pop, indie pop rap]\n    \n    \n      1\n      2016\n      10\n      [edm, pop, rap, electro house, hip hop]\n    \n  \n\n\n\n\nWe then create a numpy array from these values and apply them column by column to new dataframe columns.\n\ngenre_array = np.stack(top_genres_per_month.genre.values)\nfor i, new_col in enumerate([f'genre_{x}' for x in range(1, 6)]):\n    top_genres_per_month[new_col] = genre_array[:, i]\ntop_genres_per_month = top_genres_per_month.drop('genre', axis=1)\n\nUntil we finally arrive at the following dataframe. On the x-axis we have the top 5 genres, named genre_1 till genre_5, while on the y-axis we have months per year. This is pretty much what I set out to do, so I’m happy with the result.\n\ntop_genres_per_month = top_genres_per_month.set_index(['year', 'month']).T\ntop_genres_per_month\n\n\n\n\n\n  \n    \n      year\n      2016\n      2017\n      ...\n      2018\n      2019\n    \n    \n      month\n      9\n      10\n      11\n      12\n      1\n      2\n      3\n      4\n      5\n      6\n      ...\n      4\n      5\n      6\n      7\n      8\n      9\n      10\n      11\n      12\n      1\n    \n  \n  \n    \n      genre_1\n      rap\n      edm\n      edm\n      adult standards\n      pop\n      electro house\n      pop rap\n      rap\n      rap\n      pop\n      ...\n      rap\n      edm\n      rap\n      rap\n      rap\n      rap\n      rap\n      rap\n      rap\n      rap\n    \n    \n      genre_2\n      pop rap\n      pop\n      pop\n      easy listening\n      edm\n      filter house\n      rap\n      pop rap\n      pop rap\n      edm\n      ...\n      hip hop\n      rap\n      pop rap\n      hip hop\n      edm\n      hip hop\n      hip hop\n      hip hop\n      hip hop\n      hip hop\n    \n    \n      genre_3\n      hip hop\n      rap\n      adult standards\n      christmas\n      rock\n      dance-punk\n      edm\n      hip hop\n      hip hop\n      electro house\n      ...\n      edm\n      electro house\n      hip hop\n      pop rap\n      hip hop\n      pop rap\n      edm\n      pop rap\n      pop rap\n      pop rap\n    \n    \n      genre_4\n      pop\n      electro house\n      christmas\n      lounge\n      dance pop\n      electronic\n      hip hop\n      conscious hip hop\n      pop\n      brostep\n      ...\n      pop\n      hip hop\n      edm\n      edm\n      pop rap\n      edm\n      pop rap\n      pop\n      pop\n      edm\n    \n    \n      genre_5\n      indie pop rap\n      hip hop\n      easy listening\n      dutch hip hop\n      tropical house\n      alternative dance\n      pop\n      west coast rap\n      conscious hip hop\n      electronic trap\n      ...\n      pop rap\n      pop\n      pop\n      electro house\n      electro house\n      pop\n      pop\n      edm\n      emo rap\n      electro house\n    \n  \n\n5 rows × 29 columns\n\n\n\nHowever, the lack of color makes interpreting this table still fairly challenging. Let’s see if we can improve that a bit.\nTo style, we can use the style (docs) attribute of pd.DataFrame. This is an easy and super handy way of styling dataframes. It has two main methods: .applymap and .apply. The first one is applied to each cell individually, while the latter is applied to a whole row. That makes .applymap well suited for cell specific layouts, like min-max gradients for example, while .apply works very well for row-based operations, like highlighting the max.\nTo use them, we need to define a coloring function to apply to the dataframe. As a parameter, we give all the unique values. This allows us to create a mapping, as well as define the number of colors required. The colors we use are RGB colors that aren’t from the standard coloring libraries, like seaborn color palette. This is because none of their palettes support the number of unique values we have, which is 26. So I used the tool called i want hue, that allows the generation of suitable color palettes. Getting 26 unique colors was still not easy (or a great succes in my opinion), but it works at least semi well.\n\n\nCode\nimport seaborn as sns\n\ncolors_26 = [\n    \"#85cec7\",\n    \"#f398d9\",\n    \"#afe084\",\n    \"#90a9f4\",\n    \"#c0c15c\",\n    \"#74aff3\",\n    \"#e4e88b\",\n    \"#d8afec\",\n    \"#64ddab\",\n    \"#f3a281\",\n    \"#52ebd9\",\n    \"#ebabbe\",\n    \"#9de5a0\",\n    \"#a2b8f0\",\n    \"#e6bb6d\",\n    \"#77cdef\",\n    \"#b8c270\",\n    \"#b6bee4\",\n    \"#9ac68a\",\n    \"#4cd1da\",\n    \"#dfc299\",\n    \"#a0ebe5\",\n    \"#c0c38e\",\n    \"#8cbca8\",\n    \"#d8ebb4\",\n    \"#a7e1c1\"\n]\n\ndef color_cells(val, unique_values):\n    \"\"\"\n    Takes a cell value and applies coloring depending on the value. Should be applied to a cell, not a row. So use `.applymap`. If value is unknown, defaults to white. \n    \"\"\"\n    # Multiply with 255 to get into css RGB range (0, 255) instead of (0, 1).\n    colors_arr = [tuple(int(y*255) for y in x) for x in sns.color_palette(colors_26)]  \n    colormap = [f'rgb{x}' for x in colors_arr]\n    colors = {k: v for k, v in zip(unique_values, colormap)}\n    color = colors.get(val, 'white')\n    return f'background-color: {color}'\n\n\n\n\nCode\nunique_top_genres = np.unique(top_genres_per_month)  # Get a list of unique values for coloring\ntop_genres_per_month.style.applymap(color_cells, unique_values=unique_top_genres)\n\n\n\n            year        2016        2017        2018        2019                month        9        10        11        12        1        2        3        4        5        6        7        8        9        10        11        12        1        2        3        4        5        6        7        8        9        10        11        12        1    \n                \n                        genre_1\n                        rap\n                        edm\n                        edm\n                        adult standards\n                        pop\n                        electro house\n                        pop rap\n                        rap\n                        rap\n                        pop\n                        edm\n                        pop\n                        rap\n                        pop\n                        edm\n                        rap\n                        house\n                        rap\n                        rap\n                        rap\n                        edm\n                        rap\n                        rap\n                        rap\n                        rap\n                        rap\n                        rap\n                        rap\n                        rap\n            \n            \n                        genre_2\n                        pop rap\n                        pop\n                        pop\n                        easy listening\n                        edm\n                        filter house\n                        rap\n                        pop rap\n                        pop rap\n                        edm\n                        electro house\n                        edm\n                        pop rap\n                        rap\n                        electro house\n                        pop\n                        edm\n                        hip hop\n                        hip hop\n                        hip hop\n                        rap\n                        pop rap\n                        hip hop\n                        edm\n                        hip hop\n                        hip hop\n                        hip hop\n                        hip hop\n                        hip hop\n            \n            \n                        genre_3\n                        hip hop\n                        rap\n                        adult standards\n                        christmas\n                        rock\n                        dance-punk\n                        edm\n                        hip hop\n                        hip hop\n                        electro house\n                        pop\n                        electro house\n                        hip hop\n                        edm\n                        rap\n                        pop rap\n                        electro house\n                        pop\n                        pop rap\n                        edm\n                        electro house\n                        hip hop\n                        pop rap\n                        hip hop\n                        pop rap\n                        edm\n                        pop rap\n                        pop rap\n                        pop rap\n            \n            \n                        genre_4\n                        pop\n                        electro house\n                        christmas\n                        lounge\n                        dance pop\n                        electronic\n                        hip hop\n                        conscious hip hop\n                        pop\n                        brostep\n                        brostep\n                        brostep\n                        pop\n                        pop rap\n                        pop rap\n                        hip hop\n                        tech house\n                        pop rap\n                        edm\n                        pop\n                        hip hop\n                        edm\n                        edm\n                        pop rap\n                        edm\n                        pop rap\n                        pop\n                        pop\n                        edm\n            \n            \n                        genre_5\n                        indie pop rap\n                        hip hop\n                        easy listening\n                        dutch hip hop\n                        tropical house\n                        alternative dance\n                        pop\n                        west coast rap\n                        conscious hip hop\n                        electronic trap\n                        electronic trap\n                        electronic trap\n                        edm\n                        electro house\n                        pop\n                        edm\n                        pop\n                        edm\n                        pop\n                        pop rap\n                        pop\n                        pop\n                        electro house\n                        electro house\n                        pop\n                        pop\n                        edm\n                        emo rap\n                        electro house\n            \n    \n\n\nBetter get the 🚒 cause this table is 🔥.\nThis is really close to the Last.fm plot, apart from the lines between points that require 10 years of D3.js experience. We see some similar pattern to those in the earlier plot, but also can see some new insights. Here, we can focus some more on the anomalies that are present, like indie pop rap, dutch hip hop, filter house and conscious hip hop. These stand out more using this representation than before, which focused more on trends.\nInsights - More electronic peaks: We can see that February 2017 was actually also a peak in electronic music, but due to similar colors in the previous plot this was a bit hidden. - Pure hip hop periods: Furthermore, we can also see there are some pure hip hop periods, like April and May of 2017, where EDM and electro house are not present at all, and we see more specific hip hop genres make way like west coast rap and conscious hip hop."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Who am I?",
    "section": "",
    "text": "I’m a deep learning practitioner🧠/data scientist📈. I have a background in computer science and data science, and thus both are very prevelant in my work. I have created some bots, some deep learning implementations and some libraries related to synthetic data.\n\n🔭 I’m currently working on setting up a personal website and synthetic data using GANs.\n🌱 I’m currently learning Full Stack (Deep/machine) Learning\n💬 Ask me about PyTorch and SOTA NLP or Computer Vision models! 🔥🔥\n😊 My favorite machine learning sources are HuggingFace, Sotabench and paperswithcode"
  },
  {
    "objectID": "about.html#master-thesis",
    "href": "about.html#master-thesis",
    "title": "Who am I?",
    "section": "Master Thesis",
    "text": "Master Thesis\n\nIn my thesis, I researched improvements that we can make to Generative Adversarial Networks (GANs), to apply them better to tabular data. Contrary to GANs for vision tasks, GANs for tabular data are still very early work with only some researchers working on it. Apart from two improvements to the GAN architecture, I also wrote an open source library that focuses on how to evaluate synthetic data. You can find the github repos and the thesis PDF below.\n\n\n\n\nRepo for my thesis: Star\nRepo for evaluation library:  Star\nFind my thesis on the Radboud University website."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "Genetic Algorithms for image reconstruction 🧬\n\n\n\n\n\n\n\nGenetic Algorithms\n\n\nMachine learning\n\n\n\n\nHow we can leverage genetic algorithms to help with image reconstruction.\n\n\n\n\n\n\nFeb 16, 2023\n\n\nBauke Brenninkmeijer\n\n\n\n\n\n\n  \n\n\n\n\nAnalyzing my Spotify listening history 🎵 - Part 3\n\n\n\n\n\n\n\nAnalysis\n\n\nMusic\n\n\nBI\n\n\n\n\nIn part 3 of this adventure we discover the audio features that Spotify attributes to songs. We see how they are influenced by specific genres and how some songs relate to different audio features like instrumentalness and energy.\n\n\n\n\n\n\nAug 20, 2020\n\n\nBauke Brenninkmeijer\n\n\n\n\n\n\n  \n\n\n\n\nAnalyzing my Spotify listening history 🎵 - Part 2\n\n\n\n\n\n\n\nAnalysis\n\n\nMusic\n\n\nBI\n\n\n\n\nIn part 2 of this series, we investigate how my genres have developed over time. We find interesting pattern with regards to some holidays and a general trend towards hip hop. Additionally, we see what some good ways of visualization are for these insights.\n\n\n\n\n\n\nAug 7, 2020\n\n\nBauke Brenninkmeijer\n\n\n\n\n\n\n  \n\n\n\n\nAnalyzing my Spotify listening history 🎵 - Part 1\n\n\n\n\n\n\n\nAnalysis\n\n\nMusic\n\n\nBI\n\n\n\n\nSoul searching through my choices in music. Using my spotify listening data, we perform a dive into my listening behaviour and how it changed over time. We also make a start at analyzing the evolution of genres.\n\n\n\n\n\n\nJul 31, 2020\n\n\nBauke Brenninkmeijer\n\n\n\n\n\n\n  \n\n\n\n\nAutomated product recognition for hospitality industry insights 🍺\n\n\n\n\n\n\n\nNLP\n\n\ninternship\n\n\n\n\nBridging the gap to a data driven hospitality industry business intelligence on raw data.\n\n\n\n\n\n\nJul 24, 2020\n\n\nBauke Brenninkmeijer\n\n\n\n\n\n\n  \n\n\n\n\nIntroduction to personal website\n\n\n\n\n\n\n\nintroduction\n\n\n\n\nIntroduction to personal website.\n\n\n\n\n\n\nJul 23, 2020\n\n\nBauke Brenninkmeijer\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "resume.html",
    "href": "resume.html",
    "title": "Resume",
    "section": "",
    "text": "Below, you can find my resume in PDF format.\n\n\n\nThis browser does not support PDFs. Please download the PDF to view it: Download PDF."
  }
]